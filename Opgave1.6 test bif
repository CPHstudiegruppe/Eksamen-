library(caret)
library(rpart)
library(rpart.plot)
library(dplyr)
library(randomForest)
library(ggplot2)
library(stringr)
library(pROC)
library(ggsoccer)
library(xgboost)
library(themis)
library(RMariaDB)

# Opret forbindelse til databasen
con <- dbConnect(
  drv = MariaDB(),
  dbname = "soccerdatabase",
  host = "localhost",
  user = "root",
  password = "Jakelong99",
  flags = CLIENT_LOCAL_FILES
)

wyscout_players_sl <- dbReadTable(con, "wyscout_players_sl")
wyscout_matchevents_common_sl <- dbReadTable(con, "wyscout_matchevents_common_sl")
wyscout_matchevents_shots_sl <- dbReadTable(con, "wyscout_matchevents_shots_sl")

# Vi laver en ny df, som har alle de n√∏dvendige data
# Vi joiner wyscout_players_sl og wyscout_matchevents_common_sl p√• PLAYER_WYID

# Vi sletter alle dubletter i players
wyscout_players_sl <- wyscout_players_sl %>% 
  distinct(PLAYER_WYID, .keep_all = TRUE)

# Start med alle skud
allshots <- wyscout_matchevents_shots_sl %>%
  # Join med common-sl for at f√• fx location.x og y
  left_join(wyscout_matchevents_common_sl, by = "EVENT_WYID") %>% 
  # Join med player-info for at f√• navn, fod osv.
  left_join(wyscout_players_sl, by = "PLAYER_WYID")

# S√¶son 23/24 = 188945

# Da vi kun skal bruge data fra s√¶sonen 23/24 filtrere vi i vores s√¶son ID
allshots <- allshots %>% 
  filter(SEASON_WYID.x == 189918)

# S√¶son 24/25 = 189918 

# ---------------------------------------------- #
#           Aggregering af rolename              #
# ---------------------------------------------- #

#Original:
# - Defender
# - Midfielder
# - Forward

# Ny version (ROLEGROUP):
#  - Other (Defender + Midfielder)
#  - Forward

# Fjern det ene skud en m√•lmand har i datas√¶t 
allshots <- allshots[allshots$ROLENAME != "Goalkeeper", ]

#g√∏r til faktor
allshots$ROLENAME <- as.factor(allshots$ROLENAME)

# flet midtbane og forsvar sammen i ny vairabel 
allshots$ROLEGROUP <- ifelse(allshots$ROLENAME == "Forward", "Angriber", "Forsvar/Midtbane")
allshots$ROLEGROUP <- as.factor(allshots$ROLEGROUP)



# ---------------------------------------------- #
#   Beregning af vinkel og afstand til m√•l       #
# ---------------------------------------------- #

# Funktion til beregning af vinkel til m√•l
ca <- function(p)  {
  player_x <- p[1]
  player_y <- p[2]
  
  p1_x <- 100; p1_y <- 44  # Stolpe 1
  p2_x <- 100; p2_y <- 56  # Stolpe 2
  
  V1_x <- p1_x - player_x; V1_y <- p1_y - player_y
  V2_x <- p2_x - player_x; V2_y <- p2_y - player_y
  
  dot_product <- V1_x * V2_x + V1_y * V2_y
  magnitude_V1 <- sqrt(V1_x^2 + V1_y^2)
  magnitude_V2 <- sqrt(V2_x^2 + V2_y^2)
  
  cos_theta <- dot_product / (magnitude_V1 * magnitude_V2)
  theta_rad <- acos(cos_theta)
  theta_deg <- theta_rad * (180 / pi)
  
  return(theta_deg)
}

# Midtpunkt i m√•let
goal_x <- 100
goal_y <- 50

# Tilf√∏j vinkel og afstand
allshots <- allshots %>%
  rowwise() %>%
  mutate(
    ANGLE = ca(c(LOCATIONX, LOCATIONY)),
    LENGTH = sqrt((goal_x - LOCATIONX)^2 + (goal_y - LOCATIONY)^2)
  ) %>%
  ungroup()

# ------------------------------------------------------ #
#   Opret variabel der angiver foretrukken fod           #
# ------------------------------------------------------ #

# Antag at FOOT er spillerens foretrukne fod (fx "left" eller "right")
allshots <- allshots %>%
  mutate(
    SHOTBODYPART = case_when(
      grepl("left", SHOTBODYPART) ~ "left",
      grepl("right", SHOTBODYPART) ~ "right",
      TRUE ~ SHOTBODYPART
    ),
    PREFERRED_FOOT = case_when(
      SHOTBODYPART == "head_or_other" ~ "Non-Foot",
      SHOTBODYPART == FOOT ~ "Preferred",
      TRUE ~ "Non-Preferred"
    ),
    PREFERRED_FOOT = factor(PREFERRED_FOOT, levels = c("Preferred", "Non-Preferred", "Non-Foot"))
  )


allshots$PREFERRED_FOOT <- relevel(allshots$PREFERRED_FOOT, ref = "Preferred")


# ---------------------------------------------- #
#   Opdeling: Stratificeret sampling             #
# ---------------------------------------------- #

set.seed(123)

splitIndex <- createDataPartition(allshots$SHOTISGOAL, p = 0.8, list = FALSE)
train_data <- allshots[splitIndex, ]
test_data <- allshots[-splitIndex, ]

# Konverter relevante kolonner til faktorer
train_data <- train_data %>%
  mutate(SHOTISGOAL = as.factor(SHOTISGOAL),
         SHOTBODYPART = as.factor(SHOTBODYPART),
         SHOTBODYPART = as.factor(SHOTBODYPART))

test_data <- test_data %>%
  mutate(SHOTISGOAL = as.factor(SHOTISGOAL),
         SHOTBODYPART = as.factor(SHOTBODYPART),
         SHOTBODYPART = as.factor(SHOTBODYPART))


# ---------------------------------------------- #
#   Random Forest Model                          #
# ---------------------------------------------- #

# ---------------------------------------------- #
#             Forudsig p√• test                   #
# ---------------------------------------------- #

# Forudsig sandsynlighed for m√•l p√• test_data
test_data$predicted_prob_rf <- predict(rf_model, newdata = test_data, type = "prob")[, 2]

# ---------------------------------------------- #
#               Confusion Matrix                 #
# ---------------------------------------------- #

# Konverter m√•lkolonne til numerisk
test_data$SHOTISGOAL <- as.numeric(levels(test_data$SHOTISGOAL))[test_data$SHOTISGOAL]

# Confusion Matrix med cutoff 
test_data$predicted_goal_rf <- ifelse(test_data$predicted_prob_rf > 0.50, 1, 0)
conf_matrix_rf <- table(Actual = test_data$SHOTISGOAL, Predicted = test_data$predicted_goal_rf)
print(conf_matrix_rf)

# ---------------------------------------------- #
#               Root Squared Error               #
# ---------------------------------------------- #

#hvor t√¶t p√• 0 er resultatet? hvilket indikerer hvor pr√¶cis modellen er
rse_rf <- sqrt(mean((test_data$SHOTISGOAL - test_data$predicted_prob_rf)^2))
cat("Root Squared Error (RSE):", round(rse_rf, 4), "\n")

# ---------------------------------------------- #
#               ROC Curve og AUC                 #
# ---------------------------------------------- #

roc_curve <- roc(test_data$SHOTISGOAL, predict(rf_model, test_data, type = "prob")[, 2])
plot(roc_curve)
auc(roc_curve)


# ---------------------------------------------- #
#   10-Fold Cross-Validation af Random Forest    #
# ---------------------------------------------- #

# ---------------------------------------------- #
#             Forudsig p√• test med CV            #
# ---------------------------------------------- #

# Forudsig sandsynligheder for m√•l (klasse 1)
test_data$predicted_prob_rf_cv <- predict(rf_model_cv, newdata = test_data, type = "prob")[, 2]

# Forudsigelse med cut off 
test_data$predicted_goal_rf_cv <- ifelse(test_data$predicted_prob_rf_cv > 0.50, 1, 0)

# ---------------------------------------------- #
#   Cross-Validated Confusion Matrix             #
# ---------------------------------------------- #

# S√∏rg for at begge er faktorer med samme niveauer
pred_rf <- factor(test_data$predicted_goal_rf_cv, levels = c(0, 1))
actual <- factor(test_data$SHOTISGOAL, levels = c(0, 1))

conf_matrix_cv <- confusionMatrix(pred_rf, actual)
print(conf_matrix_cv)


# ---------------------------------------------- #
#               ROC Curve og AUC                 #
# ---------------------------------------------- #

roc_curve_cv <- roc(actual, test_data$predicted_prob_rf_cv)
plot(roc_curve_cv, col = "#228", lwd = 2, main = "ROC-kurve ‚Äì CV RF")
auc(roc_curve_cv)


# ---------------------------------------------- #
#               Root Squared Error               #
# ---------------------------------------------- #

# Konverter evt. SHOTISGOAL til numerisk (hvis det ikke allerede er)
actual_num <- as.numeric(as.character(test_data$SHOTISGOAL))

#hvor t√¶t p√• 0 er resultatet? hvilket indikerer hvor pr√¶cis modellen er
rse_cv <- sqrt(mean((actual_num - test_data$predicted_prob_rf_cv)^2))
cat("Root Squared Error (RSE):", round(rse_cv, 4), "\n")


# ---------------------------------------------- #
#         Nu g√•r vi over til XGBoost            #
# ---------------------------------------------- #

# ---------------------------------------------- #
#       Forbered: m√•lvariabel til XGBoost        #
# ---------------------------------------------- #

test_data_xg <- test_data %>%
  mutate(
    SHOTISGOAL_BIN = factor(ifelse(SHOTISGOAL == 1, "Yes", "No"), levels = c("No", "Yes")),
    SHOTISGOAL_NUM = as.numeric(as.character(SHOTISGOAL))  # til evt. AUC p√• originalt format
  )

# ---------------------------------------------- #
#         Tr√¶n XGBoost med krydsvalidering       #
# ---------------------------------------------- #

# ---------------------------------------------- #
#      Forudsig & evaluer p√• test_data           #
# ---------------------------------------------- #

# 1. Forudsig sandsynligheder for klassen "Yes"
test_data_xg$predicted_prob_xgb <- predict(xgb_model_cv, newdata = test_data_xg, type = "prob")[, "Yes"]

# 2. Brug cutoff til at lave bin√¶r forudsigelse
test_data_xg$predicted_goal_xgb <- ifelse(test_data_xg$predicted_prob_xgb > 0.50, "Yes", "No")

# ---------------------------------------------- #
#                Confusion Matrix                #
# ---------------------------------------------- #

conf_matrix_xgb <- confusionMatrix(
  factor(test_data_xg$predicted_goal_xgb, levels = c("No", "Yes")),
  test_data_xg$SHOTISGOAL_BIN
)
print(conf_matrix_xgb)

# ---------------------------------------------- #
#        üìà ROC Curve og AUC                     #
# ---------------------------------------------- #

roc_xgb <- roc(test_data_xg$SHOTISGOAL_BIN, test_data_xg$predicted_prob_xgb)
plot(roc_xgb, col = "#D7263D", lwd = 2, main = "XGBoost ROC Curve")
auc(roc_xgb)

# ---------------------------------------------- #
#       Plot af sandsynlighed ved xg boost       #
# ---------------------------------------------- #

# uden cut off v√¶rdi synligt
ggplot(test_data_xg, aes(x = predicted_prob_xgb, fill = SHOTISGOAL_BIN)) +
  geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
  labs(title = "F√¶rre m√•l scores med h√∏j xG end forrige s√¶son", x = "Sandsynlighed for m√•l", fill = "M√•l")

